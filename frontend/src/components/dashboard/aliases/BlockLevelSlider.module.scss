@import "~@mozilla-protocol/core/protocol/css/includes/tokens/dist/index.scss";
@import "~@mozilla-protocol/core/protocol/css/includes/lib";

$stopLabelHeight: 2rem;
$iconHeight: 50px;
$trackLineHeight: 4px;

.group {
  // A CSS variable to enable different values depending on the screen size:
  --thumbDiameter: 32px;

  @media screen and #{$mq-md} {
    --thumbDiameter: 24px;
  }

  display: flex;
  flex-direction: column;
  align-items: center;
  touch-action: none;
  padding: 0 calc(var(--thumbDiameter) / 2 + #{$spacing-md});
  width: 100%;

  @media screen and #{$mq-md} {
    flex-direction: row;
    gap: $spacing-xl;
    padding: 0 calc(var(--thumbDiameter) / 2 + #{$spacing-lg});
  }
  @media screen and #{$mq-lg} {
    gap: 20%;
  }

  .control {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;

    .sliderLabel {
      padding-bottom: $spacing-md;
      display: inline-block;
    }

    .track {
      --trackLineOffset: calc(
        #{$iconHeight} + (var(--thumbDiameter) / 2) - (#{$trackLineHeight} / 2)
      );
      position: relative;
      width: 100%;
      cursor: pointer;
      padding-top: $iconHeight;
      // Note: when modifying this value, make sure to also modify it
      // in the .isFree section down below:
      padding-bottom: calc(
        var(--thumbDiameter) + #{$trackLineHeight} + #{$stopLabelHeight}
      );

      .trackLine {
        position: absolute;
        background-color: $color-light-gray-20;
        height: $trackLineHeight;
        top: var(--trackLineOffset);

        width: 100%;
      }

      .trackStop {
        width: var(--thumbDiameter);
        height: var(--thumbDiameter);
        border-radius: 50%;
        background-color: $color-light-gray-20;
        position: absolute;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: $spacing-sm;

        &:hover {
          background-color: $color-purple-10;

          img {
            filter: grayscale(0%);
          }

          p {
            color: $color-purple-30;
          }
        }

        img {
          filter: grayscale(100%) brightness(150%);
          margin-top: calc(-1 * #{$iconHeight} - var(--thumbDiameter));
          padding-bottom: $spacing-sm;
          // The image should not take up space within the track stop,
          // so that the lock icon from .trackStopPromotional can be properly
          // centered:
          position: absolute;
        }

        p {
          font-family: $font-stack-firefox;
          color: $color-dark-gray-05;
          position: absolute;
          top: calc(var(--thumbDiameter) + #{$spacing-xs});
          height: $stopLabelHeight;
        }

        &.isSelected {
          img {
            filter: grayscale(0%);
          }
          p {
            color: $color-black;
          }
        }

        &.trackStopNone {
          left: calc(-1 * var(--thumbDiameter) / 2);
        }
        &.trackStopPromotional {
          left: calc(50% - var(--thumbDiameter) / 2);
        }
        &.trackStopAll {
          right: calc(-1 * (var(--thumbDiameter) / 2));
        }
      }

      .thumbContainer {
        position: absolute;
        transform: translateX(-50%);
        cursor: pointer;

        .thumb {
          width: var(--thumbDiameter);
          height: var(--thumbDiameter);
          border-radius: 50%;
          background-color: $color-violet-20;
          border: 4px solid $color-violet-50;
          box-shadow: $box-shadow-sm;

          &.isFocused {
            // The alpha value makes sure the lock icon is still visible for
            // free users when the thumb is placed on the "Promotionals" level:
            background-color: rgba($color-purple-30, 0.5);
            border-color: $color-purple-60;
          }
        }
      }

      @media screen and #{$mq-md} {
        padding-top: 0;

        .trackLine {
          top: calc(var(--trackLineOffset) - #{$iconHeight});
        }

        .trackStop {
          img {
            display: none;
          }
        }
      }
    }
  }

  .valueDescription {
    @include text-body-sm;
    $arrowEdgeLength: 8px;
    margin-top: $arrowEdgeLength;
    background-color: $color-light-gray-10;
    padding: $spacing-md $spacing-xl;
    border-radius: $border-radius-md;
    position: relative;
    width: 100%;

    &::after {
      background-color: $color-light-gray-10;
      height: 2 * $arrowEdgeLength;
      width: 2 * $arrowEdgeLength;
      transform: rotate(45deg);
      content: "";
      position: absolute;
      top: -1 * $arrowEdgeLength;
      left: calc(50% - #{$arrowEdgeLength});
    }

    .valueDescriptionContent {
      display: flex;
      flex-direction: column;
      gap: $spacing-xs;

      a {
        display: inline-block;
        color: $color-blue-50;
        font-weight: 500;

        &:hover {
          text-decoration: underline;
        }
      }

      .lockedMessage {
        display: flex;
        align-items: center;
        gap: $spacing-xs;
        font-weight: 600;

        .lockIcon {
          color: $color-light-gray-70;
        }
      }
    }

    img {
      display: none;
    }

    @media screen and #{$mq-md} {
      display: flex;
      align-items: center;
      gap: $spacing-md;
      background-color: transparent;
      // The content changes depending on the selected blocking mode,
      // so if the height would be based on the content, switching blocking modes
      // would cause a lot of jumping around:
      min-height: 150px;

      img {
        display: inline-block;
      }
    }
  }

  &.isFree {
    .control .track {
      // This is like the regular .track's bottom padding, but with
      // $stopLabelHeight multiplied by 1.5, because there's a "(Premium only)"
      // line in a smaller font below the "Promotionals" label for free users:
      padding-bottom: calc(
        var(--thumbDiameter) + #{$trackLineHeight} + #{$stopLabelHeight * 1.5}
      );

      .trackStopPromotional {
        cursor: not-allowed;
        color: $color-light-gray-70;
        border-style: none;

        &:hover {
          // The standard background colour, because this can't be selected
          // by a free user:
          background-color: $color-light-gray-20;
        }

        p {
          color: $color-light-gray-70;
          text-align: center;

          .premiumOnlyMarker {
            @include text-body-xs;
            color: $color-purple-50;
          }
        }

        &.isSelected {
          p,
          .lockIcon {
            color: $color-purple-50;
          }
        }
      }
    }
  }
}

.upgradeTooltipUnderlay {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: flex;
  align-items: center;
  justify-content: center;

  .upgradeTooltip {
    background-color: $color-white;
    box-shadow: $box-shadow-sm;
    display: flex;
    padding: $spacing-xl;
    gap: $spacing-lg;
    width: $content-md;
    max-width: 95%;
    border-radius: $border-radius-sm;

    .closeButton {
      position: absolute;
      top: $spacing-sm;
      right: $spacing-sm;
      padding: 0;
      background-color: transparent;
      border-style: none;
      border-radius: $border-radius-sm;
    }

    .upgradeMessage {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      gap: $spacing-xs;

      b {
        display: flex;
        align-items: center;
        gap: $spacing-sm;

        svg {
          color: $color-light-gray-70;
        }
      }

      a {
        color: $color-blue-50;
        // Add some padding to the focus outline, without affecting the CTA's
        // position:
        margin: -1 * $spacing-xs;
        padding: $spacing-xs;

        &:hover {
          text-decoration: underline;
        }
      }
    }
  }
}
